new_imgpoints=np.array([[[ 957.1643,  1161.1813 ]],

 [[ 957.67664, 1169.6833 ]],

 [[ 958.21643, 1178.3478 ]],

 [[ 958.51874, 1187.1802 ]],

 [[ 925.8409, 1163.1326 ]],

 [[ 925.337,   1170.6295 ]],

 [[ 924.60785, 1178.4382 ]],

 [[ 924.2705,  1188.2352 ]],

 [[ 894.47974, 1163.0116 ]],

 [[ 892.92993, 1170.8251 ]],

 [[ 891.42487, 1179.6516 ]],

 [[ 889.74634, 1188.9985 ]],

 [[ 863.34186, 1163.3113 ]],

 [[ 861.0271,  1171.4198 ]],

 [[ 857.842,   1179.4146 ]],

 [[ 855.1628,  1189.1208 ]],

 [[ 832.6407,  1162.851  ]],

 [[ 828.9453,  1170.4272 ]],

 [[ 824.92255, 1179.8756 ]],

 [[ 821.0164,  1188.3483 ]]]
)



import numpy as np
import cv2 # OpenCV library

camera_matrix=np.array([ [976.637135, 0.000000, 952.880210], 
                        [0.000000, 983.500564, 649.387647], 
                        [0.000000, 0.000000, 1.000000]], dtype=np.float32)

dist_coefficients=np.array([-0.270602, 0.051047, -0.000236, 0.000302, 0.000000], dtype=np.float32)


##with 0.057
# camera matrix
# 976.637135 0.000000 952.880210
# 0.000000 983.500564 649.387647
# 0.000000 0.000000 1.000000

# distortion
# -0.270602 0.051047 -0.000236 0.000302 0.000000

# rectification
# 1.000000 0.000000 0.000000
# 0.000000 1.000000 0.000000
# 0.000000 0.000000 1.000000

# projection
# 647.134521 0.000000 956.987737 0.000000
# 0.000000 862.658813 663.498771 0.000000
# 0.000000 0.000000 1.000000 0.000000


##width 1
# camera matrix
# 978.655599 0.000000 960.162389
# 0.000000 984.986549 647.856605
# 0.000000 0.000000 1.000000
# distortion
# -0.271893 0.051645 -0.000108 -0.000084 0.000000

# rectification
# 1.000000 0.000000 0.000000
# 0.000000 1.000000 0.000000
# 0.000000 0.000000 1.000000

# projection
# 648.931946 0.000000 959.731573 0.000000
# 0.000000 863.892944 661.749696 0.000000
# 0.000000 0.000000 1.000000 0.000000


# new_imgpoints=np.array([[ 957.1643,  1161.1813 ],#p15

#  [ 957.67664, 1169.6833 ],#p25

#  [ 958.21643, 1178.3478 ]#p35

#  [ 958.51874, 1187.1802 ],#p45

#  [ 925.8409, 1163.1326],#p14

#  [ 925.337,   1170.6295 ],#p24

#  [ 924.60785, 1178.4382 ],#p34

#  [ 924.2705,  1188.2352 ],#p44
#  [ 894.47974, 1163.0116 ],#p13

#  [ 892.92993, 1170.8251 ],#p23

#  [ 891.42487, 1179.6516 ],#p33

#  [ 889.74634, 1188.9985 ],#p43

#  [ 863.34186, 1163.3113 ],#p12

#  [ 861.0271,  1171.4198 ],#p22

#  [857.842,   1179.4146 ],#p32

#  [ 855.1628,  1189.1208 ],#p42


#  [ 832.6407,  1162.851  ],#p11

#  [ 828.9453,  1170.4272 ],#p21

#  [ 824.92255, 1179.8756 ],#p31

#  [ 821.0164,  1188.3483 ]]#p41
# )

world_points=np.array([
    [[0.255, 3.2,0]], #p15
    [[0.245,2.72,0]],#p45
    [[-0.014,3.21,0]],#p13
    [[0,2.73,0]],#p43
    [[-0.32, 3.225, 0]],#p11
    [[-0.32,2.75,0]]#p41
],dtype=np.float32)


img_points=np.array([
[[ 957.1643,  1161.1813 ]],#p15
[[ 958.51874, 1187.1802 ]],#p45
[[ 894.47974, 1163.0116 ]],#p13
[[ 889.74634, 1188.9985 ]],#p43
[[ 832.6407,  1162.851  ]],#p11
[[ 821.0164,  1188.3483 ]]#p41
],dtype=np.float32)


print(world_points)
print(img_points)



abc,rvecs, tvecs = cv2.solvePnP(world_points, img_points,camera_matrix , dist_coefficients)

print("r vecs")
print(repr(rvecs))

print("t Vecs")
print(repr(tvecs))

rot_mat, _=cv2.Rodrigues(rvecs)
print(rot_mat)



  # def calculate_worldpoints(self,pattern=[4,5],widthCheckerboard=0.16):
  #   index=0
  #   for i in range(pattern[1]):
  #     for j in range(pattern[0]):
        
  #       # self.worldPOintsCalculated[index]=[self.centerPoint[0]+(pattern[1]-i-1)*widthCheckerboard, 
  #       #                                    self.centerPoint[1]-j*widthCheckerboard,
  #       #                                    self.centerPoint[2]]
  #       self.worldPOintsCalculated[index]=[self.centerPoint[0]-i*widthCheckerboard, 
  #                                           self.centerPoint[1]-(pattern[0]-j-1)*widthCheckerboard,
  #                                           self.centerPoint[2]]

        # index=index+1
    #print(repr(self.worldPO # self.worldPOintsCalculated[index]=[self.centerPoint[0]+i*widthCheckerboard, 
        #                                    self.centerPoint[1],
        #                                    self.centerPoint[2]-j*widthCheckerboard]
